{
	"compiler": {
		"version": "0.8.17+commit.8df45f5f"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [
					{
						"internalType": "uint64",
						"name": "subscriptionId",
						"type": "uint64"
					}
				],
				"stateMutability": "nonpayable",
				"type": "constructor"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "have",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "want",
						"type": "address"
					}
				],
				"name": "OnlyCoordinatorCanFulfill",
				"type": "error"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"components": [
							{
								"internalType": "address payable",
								"name": "player",
								"type": "address"
							},
							{
								"internalType": "uint256",
								"name": "betAmount",
								"type": "uint256"
							},
							{
								"internalType": "enum Roulette.BetTypeEnum",
								"name": "betType",
								"type": "uint8"
							},
							{
								"internalType": "uint8",
								"name": "betNumber",
								"type": "uint8"
							},
							{
								"internalType": "bool",
								"name": "winner",
								"type": "bool"
							}
						],
						"indexed": false,
						"internalType": "struct Roulette.Bet",
						"name": "bet",
						"type": "tuple"
					}
				],
				"name": "LogCurrentBet",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "string",
						"name": "message",
						"type": "string"
					}
				],
				"name": "LogGameEnded",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "max",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "min",
						"type": "uint256"
					}
				],
				"name": "LogMinMax",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "string",
						"name": "message",
						"type": "string"
					}
				],
				"name": "LogPayout",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "address",
						"name": "player",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "string",
						"name": "message",
						"type": "string"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "LogResult",
				"type": "event"
			},
			{
				"inputs": [],
				"name": "addBalance",
				"outputs": [],
				"stateMutability": "payable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"name": "book",
				"outputs": [
					{
						"internalType": "address payable",
						"name": "player",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "betAmount",
						"type": "uint256"
					},
					{
						"internalType": "enum Roulette.BetTypeEnum",
						"name": "betType",
						"type": "uint8"
					},
					{
						"internalType": "uint8",
						"name": "betNumber",
						"type": "uint8"
					},
					{
						"internalType": "bool",
						"name": "winner",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "currentBet",
				"outputs": [
					{
						"internalType": "address payable",
						"name": "player",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "betAmount",
						"type": "uint256"
					},
					{
						"internalType": "enum Roulette.BetTypeEnum",
						"name": "betType",
						"type": "uint8"
					},
					{
						"internalType": "uint8",
						"name": "betNumber",
						"type": "uint8"
					},
					{
						"internalType": "bool",
						"name": "winner",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "currentRequestId",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "currentWinningNumber",
				"outputs": [
					{
						"internalType": "uint8",
						"name": "",
						"type": "uint8"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "gameInProgress",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "house",
				"outputs": [
					{
						"internalType": "address payable",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "maxBet",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "minBet",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint8",
						"name": "_bet",
						"type": "uint8"
					},
					{
						"internalType": "enum Roulette.BetTypeEnum",
						"name": "_type",
						"type": "uint8"
					}
				],
				"name": "placeBet",
				"outputs": [],
				"stateMutability": "payable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "requestId",
						"type": "uint256"
					},
					{
						"internalType": "uint256[]",
						"name": "randomWords",
						"type": "uint256[]"
					}
				],
				"name": "rawFulfillRandomWords",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "wei_amount",
						"type": "uint256"
					}
				],
				"name": "withdrawWei",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			}
		],
		"devdoc": {
			"kind": "dev",
			"methods": {
				"constructor": {
					"params": {
						"subscriptionId": "- Set this to be the ID of your Chainlink subscription.  Also, do not forget to add this contract as a consumer to that same subscription once deployed."
					}
				}
			},
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {
				"constructor": {
					"notice": "HARDCODED FOR GOERLI-Testnet COORDINATOR: 0x2Ca8E0C643bDe4C2E08ab1fA0da3401AdAD7734D"
				}
			},
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"contract/roulette.sol": "Roulette"
		},
		"evmVersion": "london",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": false,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol": {
			"keccak256": "0x3d709a5e0f1f9b8841172b10ba8af785dd51a13eda9fc395723a706e51329904",
			"license": "MIT",
			"urls": [
				"bzz-raw://038eef992d813c20737fbe94e3a36e5d541d1aa736158dd2a43dd5b840b8c360",
				"dweb:/ipfs/QmZWJ25Yr1sUSAsfJRKvTMDmGkmy63hHhB495CUL1bpNz4"
			]
		},
		"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol": {
			"keccak256": "0x54cdc97717cbae1a51a5500c8ee4875ebf056c95b54d2155a9544a79cb4f4494",
			"license": "MIT",
			"urls": [
				"bzz-raw://4bd670a55aacc0ab372835cd7e21b487f9fb69d8c6375234b68862a58f3b1153",
				"dweb:/ipfs/QmRMdB9TFLgG1LXg9VSTWbZZ1yf3uY1RY3pPkoMN23JfZk"
			]
		},
		"contract/roulette.sol": {
			"keccak256": "0x6bcc80640a04c81d38903d62cf473abff533ece3bd6db40c0623079f6923c740",
			"license": "MIT",
			"urls": [
				"bzz-raw://8b1385a557dcfde339d5c8d62d7a98b9269405d0d3c7d1a574c9fea5e6b43c6a",
				"dweb:/ipfs/QmTwuNJU71VZWMn3aaHHA7ALaUZqrc7pSqypzw6PNHRbtK"
			]
		}
	},
	"version": 1
}